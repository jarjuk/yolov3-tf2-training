
* Configration

Tag number of =marcus2002/yolov3-tf2-training= Docker
#+name: docker-tag-number
#+BEGIN_SRC R
1
#+END_SRC

#+name: stage-directory
#+BEGIN_SRC R
"/home/jj/stage/yolov3-tf2"
#+END_SRC


#+name: remote-stage-directory
#+BEGIN_SRC R
"/home/ec2-user"
#+END_SRC


** Command shortcuts
  #+name:running-ecs2
  #+BEGIN_SRC sh :eval no-export :results output
  aws ec2 describe-instances | jq '.[][].Instances[] | select( .State.Name == "running" ) | { dns: .PublicDnsName, ami: .ImageId,  InstanceId: .InstanceId, state: .State }'
  #+END_SRC

  #+name: ssh-ubuntu
  #+BEGIN_SRC sh :eval no-export :results output
  ssh -i ~/.ssh/marcus-frankfurt/marcus-franfurt.pem  ubuntu@$(aws ec2 describe-instances | jq -r '.[][].Instances[0] | select( .State.Name == "running" ) |  .PublicDnsName')
  #+END_SRC

  #+RESULTS: ssh-ubuntu

  #+name: ssh-ec2
  #+BEGIN_SRC sh :eval no-export :results output
  ssh -i ~/.ssh/marcus-frankfurt/marcus-franfurt.pem ec2-user@$(aws ec2 describe-instances | jq -r '.[][].Instances[0] | select( .State.Name == "running" ) |  .PublicDnsName')
  #+END_SRC



* Manage  EC2 instances

** Create stack =ec2.g4dn.amazon-dl.yaml=

 - Amazon deep learning ami on g4dn.xlarge
 - With access right to list s3 bucket
 - With Amanazon Linux 2 AMIn in frankfurt zone

 #+BEGIN_SRC yaml :tangle tmp/ec2.g4dn.amazon-dl.yaml
   # With Deep learing ami 
   Resources:
     InstanceSecurityGroup:
       DeletionPolicy: Delete
       Type: AWS::EC2::SecurityGroup
       Properties:
         GroupDescription: Enable SSH access via port 22
         SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: 22
           ToPort: 22
           CidrIp: 0.0.0.0/0  
     S3BucketsInstanceProfile:
       Type: AWS::IAM::InstanceProfile
       Properties:
         Path: "/"
         Roles:
         - Ref: S3BucketsRole
     ListS3BucketsPolicy:
       Type: AWS::IAM::Policy
       Properties:
         PolicyName: ListS3BucketsPolicy
         PolicyDocument:
           Statement:
           - Effect: Allow
             Action:
             - s3:List*
             Resource: "*"
         Roles:
         - Ref: S3BucketsRole
     RWS3BucketsPolicy:
       Type: AWS::IAM::Policy
       Properties:
         PolicyName: RWS3BucketsPolicy
         PolicyDocument:
           Statement:
           - Effect: Allow
             Action:
             - s3:List*
             - s3:Put*
             - s3:Get*
             - s3:Delete*
             Resource: "*"
         Roles:
         - Ref: S3BucketsRole
     S3BucketsRole:
       Type: AWS::IAM::Role
       Properties:
         AssumeRolePolicyDocument:
           Version: '2012-10-17'
           Statement:
           - Effect: Allow
             Principal:
               Service:
               - ec2.amazonaws.com
             Action:
             - sts:AssumeRole
         Path: "/"
     EC2Instance:
         DeletionPolicy: Delete
         Type: AWS::EC2::Instance
         Properties:
             # Ubuntu AMI found in console
             # ImageId: ami-0b7937aeb16a7eb94
             # Amazon Linux AMI
             # ImageId: ami-0b7a46b4bd694e8a6
             # Amazon AMI (amzn-ami-hvm-2018.03.0.20200318.2-x86_64-gp2 ())
             ## ImageId: ami-0c5254b956817b326
             ## Deep Learning AMI (Amazon Linux 2) Version 27.0 - ami-0e29cd2e136f11293
             # ImageId: ami-0e29cd2e136f11293
             # Deep Learning AMI (Amazon Linux 2) Version 27.0 - 
             ImageId: ami-0e29cd2e136f11293
             KeyName: marcus-franfurt
             InstanceType: g4dn.xlarge
             # BlockDeviceMappings:
             #  - DeviceName: "/dev/xvda"
             #    Ebs:
             #      VolumeSize: 30
             IamInstanceProfile:
               Ref: S3BucketsInstanceProfile
             SecurityGroupIds:
               - !Ref InstanceSecurityGroup
             UserData:
                 Fn::Base64: 
                   Fn::Sub:
                     -  |
                        #!/bin/bash -xe
                        echo Starting "${maailma}"> /tmp/starting.txt
                        # sudo yum update -y
                        echo yum updated >> /tmp/starting.txt
                     - 
                        maailma: Stack ec2.t3.amazon.docker.yaml
 #+END_SRC



 #+BEGIN_SRC sh :eval no-export :results output
 aws cloudformation create-stack --stack-name stakki1 --capabilities CAPABILITY_IAM  --disable-rollback --template-body file://tmp/ec2.g4dn.amazon-dl.yaml
 #+END_SRC

 #+RESULTS:
 : {
 :     "StackId": "arn:aws:cloudformation:eu-central-1:025876341083:stack/stakki1/e1635390-85fb-11ea-b036-0ac41be8cd2e"
 : }






** List stacks

Short list

#+BEGIN_SRC sh :eval no-export :results output
aws cloudformation describe-stacks | jq '.[][]| { StackName: .StackName, StackStatus: .StackStatus}' 
#+END_SRC

#+RESULTS:
: {
:   "StackName": "stakki1",
:   "StackStatus": "CREATE_COMPLETE"
: }
: {
:   "StackName": "bukee",
:   "StackStatus": "CREATE_COMPLETE"
: }



Full stack list

#+BEGIN_SRC sh :eval no-export :results output
aws cloudformation describe-stacks
#+END_SRC

#+RESULTS:
#+begin_example
{
    "Stacks": [
        {
            "StackId": "arn:aws:cloudformation:eu-central-1:025876341083:stack/stakki1/e1635390-85fb-11ea-b036-0ac41be8cd2e",
            "StackName": "stakki1",
            "CreationTime": "2020-04-24T07:19:05.380000+00:00",
            "RollbackConfiguration": {},
            "StackStatus": "CREATE_IN_PROGRESS",
            "DisableRollback": true,
            "NotificationARNs": [],
            "Capabilities": [
                "CAPABILITY_IAM"
            ],
            "Tags": [],
            "DriftInformation": {
                "StackDriftStatus": "NOT_CHECKED"
            }
        },
        {
            "StackId": "arn:aws:cloudformation:eu-central-1:025876341083:stack/bukee/5654e910-82dd-11ea-a565-067c398aa192",
            "StackName": "bukee",
            "CreationTime": "2020-04-20T08:02:53.650000+00:00",
            "RollbackConfiguration": {},
            "StackStatus": "CREATE_COMPLETE",
            "DisableRollback": true,
            "NotificationARNs": [],
            "Capabilities": [
                "CAPABILITY_IAM"
            ],
            "Tags": [],
            "DriftInformation": {
                "StackDriftStatus": "NOT_CHECKED"
            }
        }
    ]
}
#+end_example

#+BEGIN_SRC sh :eval no-export :results output
aws ec2 describe-instances
#+END_SRC

#+RESULTS:
#+begin_example
{
    "Reservations": [
        {
            "Groups": [],
            "Instances": [
                {
                    "AmiLaunchIndex": 0,
                    "ImageId": "ami-0e29cd2e136f11293",
                    "InstanceId": "i-08ba89c5467b7e451",
                    "InstanceType": "g4dn.xlarge",
                    "KeyName": "marcus-franfurt",
                    "LaunchTime": "2020-04-23T09:17:55+00:00",
                    "Monitoring": {
                        "State": "disabled"
                    },
                    "Placement": {
                        "AvailabilityZone": "eu-central-1b",
                        "GroupName": "",
                        "Tenancy": "default"
                    },
                    "PrivateDnsName": "ip-172-31-40-56.eu-central-1.compute.internal",
                    "PrivateIpAddress": "172.31.40.56",
                    "ProductCodes": [],
                    "PublicDnsName": "ec2-3-120-139-106.eu-central-1.compute.amazonaws.com",
                    "PublicIpAddress": "3.120.139.106",
                    "State": {
                        "Code": 16,
                        "Name": "running"
                    },
                    "StateTransitionReason": "",
                    "SubnetId": "subnet-fcc23780",
                    "VpcId": "vpc-e71bcc8d",
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "AttachTime": "2020-04-23T09:17:55+00:00",
                                "DeleteOnTermination": true,
                                "Status": "attached",
                                "VolumeId": "vol-038180859fe74895c"
                            }
                        }
                    ],
                    "ClientToken": "stakk-EC2In-S9TBIJ2GRRBN",
                    "EbsOptimized": false,
                    "EnaSupport": true,
                    "Hypervisor": "xen",
                    "IamInstanceProfile": {
                        "Arn": "arn:aws:iam::025876341083:instance-profile/stakki1-S3BucketsInstanceProfile-2ITVXNE78M0H",
                        "Id": "AIPAQMBSZUFN2FFTFCF52"
                    },
                    "NetworkInterfaces": [
                        {
                            "Association": {
                                "IpOwnerId": "amazon",
                                "PublicDnsName": "ec2-3-120-139-106.eu-central-1.compute.amazonaws.com",
                                "PublicIp": "3.120.139.106"
                            },
                            "Attachment": {
                                "AttachTime": "2020-04-23T09:17:55+00:00",
                                "AttachmentId": "eni-attach-0b1ff98896813ddd4",
                                "DeleteOnTermination": true,
                                "DeviceIndex": 0,
                                "Status": "attached"
                            },
                            "Description": "",
                            "Groups": [
                                {
                                    "GroupName": "stakki1-InstanceSecurityGroup-EYTXD5UJGZZJ",
                                    "GroupId": "sg-0e85dedd601fae854"
                                }
                            ],
                            "Ipv6Addresses": [],
                            "MacAddress": "06:d5:6d:d7:61:30",
                            "NetworkInterfaceId": "eni-0d2b3682511050432",
                            "OwnerId": "025876341083",
                            "PrivateDnsName": "ip-172-31-40-56.eu-central-1.compute.internal",
                            "PrivateIpAddress": "172.31.40.56",
                            "PrivateIpAddresses": [
                                {
                                    "Association": {
                                        "IpOwnerId": "amazon",
                                        "PublicDnsName": "ec2-3-120-139-106.eu-central-1.compute.amazonaws.com",
                                        "PublicIp": "3.120.139.106"
                                    },
                                    "Primary": true,
                                    "PrivateDnsName": "ip-172-31-40-56.eu-central-1.compute.internal",
                                    "PrivateIpAddress": "172.31.40.56"
                                }
                            ],
                            "SourceDestCheck": true,
                            "Status": "in-use",
                            "SubnetId": "subnet-fcc23780",
                            "VpcId": "vpc-e71bcc8d",
                            "InterfaceType": "interface"
                        }
                    ],
                    "RootDeviceName": "/dev/xvda",
                    "RootDeviceType": "ebs",
                    "SecurityGroups": [
                        {
                            "GroupName": "stakki1-InstanceSecurityGroup-EYTXD5UJGZZJ",
                            "GroupId": "sg-0e85dedd601fae854"
                        }
                    ],
                    "SourceDestCheck": true,
                    "Tags": [
                        {
                            "Key": "aws:cloudformation:logical-id",
                            "Value": "EC2Instance"
                        },
                        {
                            "Key": "aws:cloudformation:stack-name",
                            "Value": "stakki1"
                        },
                        {
                            "Key": "aws:cloudformation:stack-id",
                            "Value": "arn:aws:cloudformation:eu-central-1:025876341083:stack/stakki1/fa78d4e0-8542-11ea-bdb4-06d8413a1460"
                        }
                    ],
                    "VirtualizationType": "hvm",
                    "CpuOptions": {
                        "CoreCount": 2,
                        "ThreadsPerCore": 2
                    },
                    "CapacityReservationSpecification": {
                        "CapacityReservationPreference": "open"
                    },
                    "HibernationOptions": {
                        "Configured": false
                    },
                    "MetadataOptions": {
                        "State": "applied",
                        "HttpTokens": "optional",
                        "HttpPutResponseHopLimit": 1,
                        "HttpEndpoint": "enabled"
                    }
                }
            ],
            "OwnerId": "025876341083",
            "RequesterId": "119857478548",
            "ReservationId": "r-08606e3993dcbfb97"
        }
    ]
}
#+end_example


** List Running instances

Short list of running ec2 instances

#+BEGIN_SRC sh :eval no-export :results output 
aws ec2 describe-instances | jq '.[][].Instances[] | select( .State.Name == "running" ) | { dns: .PublicDnsName, ami: .ImageId,  InstanceId: .InstanceId, state: .State.Name, InstanceType: .InstanceType }'
#+END_SRC

#+RESULTS:
: {
:   "dns": "ec2-35-159-24-254.eu-central-1.compute.amazonaws.com",
:   "ami": "ami-0e29cd2e136f11293",
:   "InstanceId": "i-0d2f2640a7e3743f5",
:   "state": "running",
:   "InstanceType": "g4dn.xlarge"
: }


** Show SSH connection

Running instances
#+BEGIN_SRC sh :eval no-export :results output :noweb yes
echo <<ssh-ec2>> 
echo <<ssh-ubuntu>> 
#+END_SRC

#+RESULTS:
: ssh -i /home/jj/.ssh/marcus-frankfurt/marcus-franfurt.pem ec2-user@ec2-35-159-24-254.eu-central-1.compute.amazonaws.com
: ssh -i /home/jj/.ssh/marcus-frankfurt/marcus-franfurt.pem ubuntu@ec2-35-159-24-254.eu-central-1.compute.amazonaws.com


 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
 <<ssh-ec2>> 'echo Greets from $(hostname) in $(pwd)'
 #+END_SRC

 #+RESULTS:


** Run docker =marcus2002/hello:1=

 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
 <<ssh-ec2>> sudo docker run \
      --user $(id -u):$(id -g) \
       --net=host \
       marcus2002/hello:1
 #+END_SRC

 #+RESULTS:
 : Hello User 1000:1000 on ip-172-31-47-204.eu-central-1.compute.internal


** Run docker =marcus2002/tf-gpu-checker:6=
   

*** Usage: 
 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
  <<ssh-ec2>>  sudo docker run  marcus2002/tf-gpu-checker:6 || true
 #+END_SRC

 #+RESULTS:
 : gpu-checker.py  -  tensorflow GPU tester usage
 : gpu-checker.py  cpu|gpu [0-9]|list|test


*** List
 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
  <<ssh-ec2>>  sudo nvidia-docker run  marcus2002/tf-gpu-checker:6 list
 #+END_SRC

 #+RESULTS:
 #+begin_example
 device_lib.list_local_devices() = [name: "/device:CPU:0"
 device_type: "CPU"
 memory_limit: 268435456
 locality {
 }
 incarnation: 9744715576244972587
 , name: "/device:XLA_CPU:0"
 device_type: "XLA_CPU"
 memory_limit: 17179869184
 locality {
 }
 incarnation: 16740619013586793133
 physical_device_desc: "device: XLA_CPU device"
 , name: "/device:XLA_GPU:0"
 device_type: "XLA_GPU"
 memory_limit: 17179869184
 locality {
 }
 incarnation: 18264200861144769592
 physical_device_desc: "device: XLA_GPU device"
 , name: "/device:GPU:0"
 device_type: "GPU"
 memory_limit: 14784367168
 locality {
   bus_id: 1
   links {
   }
 }
 incarnation: 665892608446454497
 physical_device_desc: "device: 0, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: 7.5"
 ]
 Devices: [_DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 268435456, 3240473296435325983), _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, -274635117949149829), _DeviceAttributes(/job:localhost/replica:0/task:0/device:XLA_GPU:0, XLA_GPU, 17179869184, -7620521750751868766), _DeviceAttributes(/job:localhost/replica:0/task:0/device:GPU:0, GPU, 14784367168, -5956744840926436734)]
 #+end_example




*** Test


 *nvidia-docker*
 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
  ## <<ssh-ec2>>  bash -c "sudo nvidia-docker run  marcus2002/tf-gpu-checker:6 test"
  <<ssh-ec2>>  sudo nvidia-docker run  marcus2002/tf-gpu-checker:6 test
 #+END_SRC

 #+RESULTS:
 : tf.test.is_gpu_available()= True
 : tf.config.list_physical_devices('GPU')= [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]
 : tf.config.list_physical_devices('CPU')= [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
 : tf.test.is_built_with_cuda()= True




*docker*
 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
  <<ssh-ec2>>  sudo docker run  marcus2002/tf-gpu-checker:6 test
 #+END_SRC

 #+RESULTS:
 : tf.test.is_gpu_available()= False
 : tf.config.list_physical_devices('GPU')= []
 : tf.config.list_physical_devices('CPU')= [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
 : tf.test.is_built_with_cuda()= True


*** cpu
 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
  <<ssh-ec2>>  sudo nvidia-docker run  marcus2002/tf-gpu-checker:6 cpu
 #+END_SRC

 #+RESULTS:
 : Using CPU
 : c= tf.Tensor(
 : [[22. 28.]
 :  [49. 64.]], shape=(2, 2), dtype=float32)
 : Device mapping:
 : /job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device
 : /job:localhost/replica:0/task:0/device:XLA_GPU:0 -> device: XLA_GPU device
 : /job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: 7.5


*** GPU check
 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
  <<ssh-ec2>>  sudo nvidia-docker run  marcus2002/tf-gpu-checker:6 gpu 0
 #+END_SRC

 #+RESULTS:
 : device_name= /gpu:0
 : c= tf.Tensor(
 : [[22. 28.]
 :  [49. 64.]], shape=(2, 2), dtype=float32)
 : Device mapping:
 : /job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device
 : /job:localhost/replica:0/task:0/device:XLA_GPU:0 -> device: XLA_GPU device
 : /job:localhost/replica:0/task:0/device:GPU:0 -> device: 0, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: 7.5

 #+begin_example
 2020-04-16 07:32:35.714273: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
 2020-04-16 07:32:35.727147: E tensorflow/stream_executor/cuda/cuda_driver.cc:351] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
 2020-04-16 07:32:35.727210: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (1fc4a111d5f6): /proc/driver/nvidia/version does not exist
 2020-04-16 07:32:35.727828: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 AVX512F FMA
 2020-04-16 07:32:35.734001: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2499995000 Hz
 2020-04-16 07:32:35.734312: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55a973e5ecf0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
 2020-04-16 07:32:35.734370: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
 device_name= /gpu:0
 Traceback (most recent call last):
   File "gpu-checker.py", line 34, in <module>
     a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')
   File "/opt/conda/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py", line 258, in constant
     allow_broadcast=True)
   File "/opt/conda/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py", line 266, in _constant_impl
     t = convert_to_eager_tensor(value, ctx, dtype)
   File "/opt/conda/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py", line 96, in convert_to_eager_tensor
     return ops.EagerTensor(value, ctx.device_name, dtype)
 RuntimeError: /job:localhost/replica:0/task:0/device:GPU:0 unknown device.
 #+end_example


** Delete stack =stakki1=

#+BEGIN_SRC sh :eval no-export :results output
aws cloudformation delete-stack --stack-name stakki1
#+END_SRC



#+RESULTS:

#+BEGIN_SRC sh :eval no-export :results output
aws cloudformation delete-stack --stack-name bukee
#+END_SRC

#+RESULTS:


*Ensure nothing there!!*

#+BEGIN_SRC sh :eval no-export :results output
aws cloudformation describe-stacks
aws ec2 describe-instances | jq '.[][].Instances[] |  { dns: .PublicDnsName, ami: .ImageId,  InstanceId: .InstanceId, state: .State }'
#+END_SRC


#+RESULTS:
#+begin_example
{
    "Stacks": [
        {
            "StackId": "arn:aws:cloudformation:eu-central-1:025876341083:stack/stakki1/e1635390-85fb-11ea-b036-0ac41be8cd2e",
            "StackName": "stakki1",
            "CreationTime": "2020-04-24T07:19:05.380000+00:00",
            "DeletionTime": "2020-04-24T10:16:19.240000+00:00",
            "RollbackConfiguration": {},
            "StackStatus": "DELETE_IN_PROGRESS",
            "DisableRollback": true,
            "NotificationARNs": [],
            "Capabilities": [
                "CAPABILITY_IAM"
            ],
            "Tags": [],
            "DriftInformation": {
                "StackDriftStatus": "NOT_CHECKED"
            }
        },
        {
            "StackId": "arn:aws:cloudformation:eu-central-1:025876341083:stack/bukee/5654e910-82dd-11ea-a565-067c398aa192",
            "StackName": "bukee",
            "CreationTime": "2020-04-20T08:02:53.650000+00:00",
            "DeletionTime": "2020-04-24T10:16:54.949000+00:00",
            "RollbackConfiguration": {},
            "StackStatus": "DELETE_FAILED",
            "StackStatusReason": "The following resource(s) failed to delete: [RootBucket]. ",
            "DisableRollback": true,
            "NotificationARNs": [],
            "Capabilities": [
                "CAPABILITY_IAM"
            ],
            "Tags": [],
            "DriftInformation": {
                "StackDriftStatus": "NOT_CHECKED"
            }
        }
    ]
}
{
  "dns": "ec2-35-159-24-254.eu-central-1.compute.amazonaws.com",
  "ami": "ami-0e29cd2e136f11293",
  "InstanceId": "i-0d2f2640a7e3743f5",
  "state": {
    "Code": 32,
    "Name": "shutting-down"
  }
}
#+end_example




* Training =yolov3-tf2=

** Create data directories

 #+BEGIN_SRC sh :eval no-export :results output :noweb yes
   <<ssh-ec2>> bash -c 'test -d checkpoints  &&  mkdir checkpoints'
   <<ssh-ec2>> bash -c 'test  -d data  && mkdir data'
   <<ssh-ec2>> bash -c 'test  -d voc.meta  && mkdir voc.meta'
   <<ssh-ec2>> bash -c 'test  -d output  && mkdir output'
 #+END_SRC

 #+RESULTS:


** Copy data

#+BEGIN_SRC sh :eval no-export :results output :var STAGE=stage-directory
ls -ltr $STAGE/data
#+END_SRC

#+RESULTS:
: total 1558064
: -rw-r--r-- 1 root root 248070167 huhti 24 09:27 yolov3-cnv.tf.data-00000-of-00001
: -rw-r--r-- 1 root root     24143 huhti 24 09:27 yolov3-cnv.tf.index
: -rw-r--r-- 1 root root        83 huhti 24 09:27 checkpoint
: -rw-r--r-- 1 jj   root 668674204 huhti 24 09:47 voc2012_train.tfrecord
: -rw-r--r-- 1 jj   root 678662716 huhti 24 09:47 voc2012_val.tfrecord

#+BEGIN_SRC sh :eval no-export :results output :var STAGE=stage-directory 
tar cvfz $STAGE/data/yolov3.data.tgz -C $STAGE/data ./yolov3-cnv.tf.data-00000-of-00001 ./yolov3-cnv.tf.index ./voc2012_train.tfrecord ./voc2012_val.tfrecord
#+END_SRC

#+RESULTS:
: ./yolov3-cnv.tf.data-00000-of-00001
: ./yolov3-cnv.tf.index
: ./voc2012_train.tfrecord
: ./voc2012_val.tfrecord

#+BEGIN_SRC sh :eval no-export :results output :var STAGE=stage-directory
ls -ltr $STAGE/data
#+END_SRC

#+RESULTS:
: total 3093792
: -rw-r--r-- 1 root root  248070167 huhti 24 09:27 yolov3-cnv.tf.data-00000-of-00001
: -rw-r--r-- 1 root root      24143 huhti 24 09:27 yolov3-cnv.tf.index
: -rw-r--r-- 1 root root         83 huhti 24 09:27 checkpoint
: -rw-r--r-- 1 jj   root  668674204 huhti 24 09:47 voc2012_train.tfrecord
: -rw-r--r-- 1 jj   root  678662716 huhti 24 09:47 voc2012_val.tfrecord
: -rw-rw-r-- 1 jj   jj   1572578623 huhti 24 10:36 yolov3.data.tgz


#+BEGIN_SRC sh :eval no-export :results output :var STAGE=stage-directory
scp $STAGE/data/yolov3.data.tgz frankfurt:.
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :eval no-export :results output :noweb yes
<<ssh-ec2>> ls  -ltr  data
<<ssh-ec2>> tar tvfz yolov3.data.tgz
#+END_SRC

#+RESULTS:
: total 0
: -rw-r--r-- root/root 248070167 2020-04-24 06:27 ./yolov3-cnv.tf.data-00000-of-00001
: -rw-r--r-- root/root     24143 2020-04-24 06:27 ./yolov3-cnv.tf.index
: -rw-r--r-- jj/root   668674204 2020-04-24 06:47 ./voc2012_train.tfrecord
: -rw-r--r-- jj/root   678662716 2020-04-24 06:47 ./voc2012_val.tfrecord

extract

#+BEGIN_SRC sh :eval no-export :results output :noweb yes
<<ssh-ec2>> tar xvfz yolov3.data.tgz -C data .
#+END_SRC

#+RESULTS:
: ./yolov3-cnv.tf.data-00000-of-00001
: ./yolov3-cnv.tf.index
: ./voc2012_train.tfrecord
: ./voc2012_val.tfrecord

#+BEGIN_SRC sh :eval no-export :results output :noweb yes
<<ssh-ec2>> ls  -ltr  data
#+END_SRC

#+RESULTS:
: total 1558048
: -rw-r--r-- 1 ec2-user ec2-user     24143 24.4. 06:27 yolov3-cnv.tf.index
: -rw-r--r-- 1 ec2-user ec2-user 248070167 24.4. 06:27 yolov3-cnv.tf.data-00000-of-00001
: -rw-r--r-- 1 ec2-user ec2-user 668674204 24.4. 06:47 voc2012_train.tfrecord
: -rw-r--r-- 1 ec2-user ec2-user 678662716 24.4. 06:47 voc2012_val.tfrecord

** gpu-checker usage

#+BEGIN_SRC sh :eval no-export :results output :noweb yes  :var TAG=docker-tag-number
<<ssh-ec2>> nvidia-docker run  marcus2002/yolov3-tf2-training:$TAG python ../gpu-checker.py || true
#+END_SRC

#+RESULTS:
: ../gpu-checker.py  -  tensorflow GPU tester usage
: ../gpu-checker.py  cpu|gpu [0-9]|device NAME [0-9]|list|test|versions

** gpu-checker test

#+BEGIN_SRC sh :eval no-export :results output :noweb yes  :var TAG=docker-tag-number :noweb yes
<<ssh-ec2>> nvidia-docker run --user $(id -u)  marcus2002/yolov3-tf2-training:$TAG python ../gpu-checker.py test
#+END_SRC

#+RESULTS:
: tf.test.is_gpu_available()= True
: tf.config.list_physical_devices('GPU')= [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]
: tf.config.list_physical_devices('CPU')= [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
: tf.test.is_built_with_cuda()= True


** gpu-cheker gpu 0 and cpu
#+BEGIN_SRC sh :eval no-export :results output :noweb yes  :var TAG=docker-tag-number :noweb yes
<<ssh-ec2>> docker run --user $(id -u)  marcus2002/yolov3-tf2-training:$TAG python ../gpu-checker.py gpu 0
<<ssh-ec2>> docker run --user $(id -u)  marcus2002/yolov3-tf2-training:$TAG python ../gpu-checker.py cpu
#+END_SRC

#+RESULTS:
#+begin_example
device_name= /gpu:0
c= tf.Tensor(
[[22. 28.]
 [49. 64.]], shape=(2, 2), dtype=float32)
Device mapping:
/job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device
Using CPU
c= tf.Tensor(
[[22. 28.]
 [49. 64.]], shape=(2, 2), dtype=float32)
Device mapping:
/job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device
#+end_example


** Run training

#+BEGIN_SRC sh :eval no-export :results output :var STAGE=remote-stage-directory :var TAG=docker-tag-number :noweb yes
  <<ssh-ec2>> nvidia-docker run \
       --user $(id -u) \
       --workdir /yolov3-tf2 \
       --volume $STAGE/data:/yolov3-tf2/voc.data \
       --volume $STAGE/checkpoints:/yolov3-tf2/checkpoints \
       --volume $STAGE/output:/yolov3-tf2/output \
       marcus2002/yolov3-tf2-training:$TAG \
       ls  -ltr ./voc.data ./checkpoints ./data
#+END_SRC

#+RESULTS:
#+begin_example
./data:
total 2420
-rw-r--r-- 1 root root    135 Apr 24 05:06 voc2012.names
-rw-r--r-- 1 root root 285600 Apr 24 05:06 street_out.jpg
-rw-r--r-- 1 root root 465046 Apr 24 05:06 street.jpg
-rw-r--r-- 1 root root 625129 Apr 24 05:06 meme_out.jpg
-rw-r--r-- 1 root root   8875 Apr 24 05:06 meme2.jpeg
-rw-r--r-- 1 root root 401910 Apr 24 05:06 meme.jpg
-rw-r--r-- 1 root root 664559 Apr 24 05:06 girl.png
-rw-r--r-- 1 root root    625 Apr 24 05:06 coco.names
-rw-r--r-- 1 root root     75 Apr 24 05:06 checkpoint

./checkpoints:
total 0

./voc.data:
total 1558048
-rw-r--r-- 1 1000 1000     24143 Apr 24 06:27 yolov3-cnv.tf.index
-rw-r--r-- 1 1000 1000 248070167 Apr 24 06:27 yolov3-cnv.tf.data-00000-of-00001
-rw-r--r-- 1 1000 1000 668674204 Apr 24 06:47 voc2012_train.tfrecord
-rw-r--r-- 1 1000 1000 678662716 Apr 24 06:47 voc2012_val.tfrecord
#+end_example


#+BEGIN_SRC sh :eval no-export :results output :var STAGE=remote-stage-directory  :var TAG=docker-tag-number :noweb yes
 <<ssh-ec2>>  echo sudo nvidia-docker run \
       --workdir /yolov3-tf2 \
       --volume $STAGE/data:/yolov3-tf2/voc.data \
       --volume $STAGE/checkpoints:/yolov3-tf2/checkpoints \
       --volume $STAGE/voc.meta:/yolov3-tf2/meta \
       --volume $STAGE/output:/yolov3-tf2/output \
       marcus2002/yolov3-tf2-training:$TAG \
       python train.py \
	--dataset ./voc.data/voc2012_train.tfrecord \
	--val_dataset ./voc.data/voc2012_val.tfrecord \
	--weights ./voc.data/yolov3-cnv.tf \
	--classes ./data/voc2012.names \
	--num_classes 20 \
	--mode fit \
        --transfer darknet \
	--batch_size 16 \
	--epochs 10 \
	--weights_num_classes 80 
#+END_SRC

#+RESULTS:
: sudo nvidia-docker run --workdir /yolov3-tf2 --volume /home/ec2-user/data:/yolov3-tf2/voc.data --volume /home/ec2-user/checkpoints:/yolov3-tf2/checkpoints --volume /home/ec2-user/voc.meta:/yolov3-tf2/meta --volume /home/ec2-user/output:/yolov3-tf2/output marcus2002/yolov3-tf2-training:1 python train.py --dataset ./voc.data/voc2012_train.tfrecord --val_dataset ./voc.data/voc2012_val.tfrecord --weights ./voc.data/yolov3-cnv.tf --classes ./data/voc2012.names --num_classes 20 --mode fit --transfer darknet --batch_size 16 --epochs 10 --weights_num_classes 80

Result
#+begin_example
Epoch 00009: saving model to checkpoints/yolov3_train_9.tf
358/358 [==============================] - 328s 917ms/step - loss: 16.1118 - yolo_output_0_loss: 1.3019 - yolo_output_1_loss: 1.5299 - yolo_output_2_loss: 2.1663 - val_loss: 24.4573 - val_yolo_output_0_loss: 5.6939 - val_yolo_output_1_loss: 5.0424 - val_yolo_output_2_loss: 2.6020 - lr: 0.0010
Epoch 00009: early stopping
#+end_example

** Detect after training session 1


#+BEGIN_SRC sh :eval no-export :results output :var STAGE=remote-stage-directory  :var TAG=docker-tag-number :noweb yes
<<ssh-ec2>>   nvidia-docker run \
       --user $(id -u) \
       --workdir /yolov3-tf2 \
       --volume $STAGE/checkpoints:/yolov3-tf2/checkpoints \
       --volume $STAGE/data:/yolov3-tf2/voc.data \
       --volume $STAGE/output:/yolov3-tf2/output \
       marcus2002/yolov3-tf2-training:$TAG \
       python detect.py \
           	--classes ./data/voc2012.names \
	        --num_classes 20 \
                     --weights ./checkpoints/yolov3_train_9.tf \
                     --image  ./data/street.jpg \
                     --output ./output/trained1.jpg
#+END_SRC

#+RESULTS:


[[/ssh:frankfurt:/home/ec2-user/output/trained1.jpg]]

#+BEGIN_SRC sh :eval no-export :results output :var STAGE=remote-stage-directory  :var TAG=docker-tag-number :noweb yes
<<ssh-ec2>>   nvidia-docker run \
       --user $(id -u) \
       --workdir /yolov3-tf2 \
       --volume $STAGE/checkpoints:/yolov3-tf2/checkpoints \
       --volume $STAGE/data:/yolov3-tf2/voc.data \
       --volume $STAGE/output:/yolov3-tf2/output \
       marcus2002/yolov3-tf2-training:$TAG \
       python detect.py \
               --classes ./data/voc2012.names \
               --num_classes 20 \
               --weights ./checkpoints/yolov3_train_9.tf \
               --tfrecord ./voc.data/voc2012_val.tfrecord \
               --output ./output/trained2.jpg
#+END_SRC

#+RESULTS:

[[/ssh:frankfurt:/home/ec2-user/output/trained2.jpg]]


** Train session 2

#+BEGIN_SRC sh :eval no-export :results output :var STAGE=remote-stage-directory  :var TAG=docker-tag-number :noweb yes
 <<ssh-ec2>>  echo sudo nvidia-docker run \
       --workdir /yolov3-tf2 \
       --volume $STAGE/data:/yolov3-tf2/voc.data \
       --volume $STAGE/checkpoints:/yolov3-tf2/checkpoints \
       --volume $STAGE/voc.meta:/yolov3-tf2/meta \
       --volume $STAGE/output:/yolov3-tf2/output \
       marcus2002/yolov3-tf2-training:$TAG \
       python train.py \
	--dataset ./voc.data/voc2012_train.tfrecord \
	--val_dataset ./voc.data/voc2012_val.tfrecord \
	--weights ./checkpoints/train_9.tf \
	--classes ./data/voc2012.names \
	--num_classes 20 \
	--mode fit \
        --transfer darknet \
	--batch_size 16 \
	--epochs 10 \
        --learning_rate 1e-4 \
	--weights_num_classes 20 
#+END_SRC

#+RESULTS:
: sudo nvidia-docker run --workdir /yolov3-tf2 --volume /home/ec2-user/data:/yolov3-tf2/voc.data --volume /home/ec2-user/checkpoints:/yolov3-tf2/checkpoints --volume /home/ec2-user/voc.meta:/yolov3-tf2/meta --volume /home/ec2-user/output:/yolov3-tf2/output marcus2002/yolov3-tf2-training:1 python train.py --dataset ./voc.data/voc2012_train.tfrecord --val_dataset ./voc.data/voc2012_val.tfrecord --weights ./checkpoints/train_9.tf --classes ./data/voc2012.names --num_classes 20 --mode fit --transfer darknet --batch_size 16 --epochs 10 --learning_rate 1e-4 --weights_num_classes 20


** Detect after training session 2

#+BEGIN_SRC sh :eval no-export :results output :noweb yes
<<ssh-ec2>>   ls -ltr checkpoints
#+END_SRC

#+RESULTS:
#+begin_example
total 4459844
-rw-r--r-- 1 ec2-user ec2-user     85875 24.4. 08:58 train_9.tf.data-00000-of-00002
-rw-r--r-- 1 ec2-user ec2-user     35394 24.4. 08:58 train_9.tf.index
-rw-r--r-- 1 ec2-user ec2-user 415043620 24.4. 08:58 train_9.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         85875 24.4. 09:19 yolov3_train_1.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 09:19 yolov3_train_1.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:19 yolov3_train_1.tf.index
-rw-r--r-- 1 root     root         85875 24.4. 09:25 yolov3_train_2.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 09:25 yolov3_train_2.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:25 yolov3_train_2.tf.index
-rw-r--r-- 1 root     root         85875 24.4. 09:31 yolov3_train_3.tf.data-00000-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:31 yolov3_train_3.tf.index
-rw-r--r-- 1 root     root     415043620 24.4. 09:31 yolov3_train_3.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         85875 24.4. 09:36 yolov3_train_4.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 09:36 yolov3_train_4.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:36 yolov3_train_4.tf.index
-rw-r--r-- 1 root     root         85875 24.4. 09:42 yolov3_train_5.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 09:42 yolov3_train_5.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:42 yolov3_train_5.tf.index
-rw-r--r-- 1 root     root         85875 24.4. 09:48 yolov3_train_6.tf.data-00000-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:48 yolov3_train_6.tf.index
-rw-r--r-- 1 root     root     415043620 24.4. 09:48 yolov3_train_6.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         85875 24.4. 09:54 yolov3_train_7.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 09:54 yolov3_train_7.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:54 yolov3_train_7.tf.index
-rw-r--r-- 1 root     root         85875 24.4. 09:59 yolov3_train_8.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 09:59 yolov3_train_8.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 09:59 yolov3_train_8.tf.index
-rw-r--r-- 1 root     root         85875 24.4. 10:05 yolov3_train_9.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 10:05 yolov3_train_9.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 10:05 yolov3_train_9.tf.index
-rw-r--r-- 1 root     root         85875 24.4. 10:11 yolov3_train_10.tf.data-00000-of-00002
-rw-r--r-- 1 root     root     415043620 24.4. 10:11 yolov3_train_10.tf.data-00001-of-00002
-rw-r--r-- 1 root     root         35394 24.4. 10:11 yolov3_train_10.tf.index
-rw-r--r-- 1 root     root            93 24.4. 10:11 checkpoint
#+end_example


#+BEGIN_SRC sh :eval no-export :results output :var STAGE=remote-stage-directory  :var TAG=docker-tag-number :noweb yes
<<ssh-ec2>>   nvidia-docker run \
       --user $(id -u) \
       --workdir /yolov3-tf2 \
       --volume $STAGE/checkpoints:/yolov3-tf2/checkpoints \
       --volume $STAGE/data:/yolov3-tf2/voc.data \
       --volume $STAGE/output:/yolov3-tf2/output \
       marcus2002/yolov3-tf2-training:$TAG \
       python detect.py \
           	--classes ./data/voc2012.names \
	        --num_classes 20 \
                     --weights ./checkpoints/yolov3_train_10.tf \
                     --image  ./data/street.jpg \
                     --output ./output/trained2_1.jpg
#+END_SRC

#+RESULTS:


[[/ssh:frankfurt:/home/ec2-user/output/trained1.jpg]]

#+BEGIN_SRC sh :eval no-export :results output :var STAGE=remote-stage-directory  :var TAG=docker-tag-number :noweb yes
<<ssh-ec2>>   nvidia-docker run \
       --user $(id -u) \
       --workdir /yolov3-tf2 \
       --volume $STAGE/checkpoints:/yolov3-tf2/checkpoints \
       --volume $STAGE/data:/yolov3-tf2/voc.data \
       --volume $STAGE/output:/yolov3-tf2/output \
       marcus2002/yolov3-tf2-training:$TAG \
       python detect.py \
               --classes ./data/voc2012.names \
               --num_classes 20 \
               --weights ./checkpoints/yolov3_train_10.tf \
               --tfrecord ./voc.data/voc2012_val.tfrecord \
               --output ./output/trained2_2.jpg
#+END_SRC

#+RESULTS:

[[/ssh:frankfurt:/home/ec2-user/output/trained2_2.jpg]]



* Fin                                                              :noexport:

** Emacs variables

#+RESULTS:

# Local Variables:
# org-confirm-babel-evaluate: nil
# conda-project-env-name: tsr
# End:


