* yolov3-tf2-training - Dockerize yolov3-tf2 and train it on Amazon EC2 instance
  :PROPERTIES:
  :TOC:      :include descendants :depth 2
  :END:

Create Docker container for [[https://github.com/zzh8829/yolov3-tf2][YoloV3 algorithm implemented in Tensorflow
2.0]] and train it on an AWS EC2 instance using [[http://host.robots.ox.ac.uk/pascal/VOC/voc2012/][VOC2012 image set]].

:CONTENTS:
- [[#architecture][Architecture]]
- [[#training-sessions][Training sessions]]
- [[#training-session-results][Training session results]]
- [[#tools-and-versions][Tools and versions]]
:END:


** Architecture

  #+name: process
  #+BEGIN_SRC plantuml :eval no-export :exports results :file pics/process.jpg

    node local {

       file docker.org <<org document>>
       file aws.org <<org document>>

      

       folder stage {
           entity darknet.tf <<weights>>
           entity voc2012.tf <<image data>>
       }

       component "yolov3-tf2-training" as dockerLocal <<container>>

       dockerLocal --> voc2012.tf : convert from VOC2012 image set
       dockerLocal --> darknet.tf : convert original darknet weigths
 
       agent browser

    }

    queue sshTunnel


    node docker.repo {
       component "yolov3-tf2-training" as dockerRepo  <<container>>
    }

    node aws {

       node g4dn.xlarge <<EC2>> {
          component "yolov3-tf2-training" as dockerAws  <<container>>

          folder "stage" as stageAws   {
              entity yolov3_train.tf <<weights>>
          }
       }
    }


    docker.org ..> dockerLocal : scripts for building preparing local stage
    aws.org ..> aws : scripts controlling 

    darknet.tf --> dockerAws : copy initial weights
    voc2012.tf --> dockerAws : copy training and validation data
    dockerAws --> yolov3_train.tf : checkpoint during training
    dockerLocal --> dockerRepo : docker push

    dockerRepo -->  dockerAws : docker run

    browser <-- sshTunnel : localhost:16006

   dockerAws --> sshTunnel  : 6006 tensorboard


  #+END_SRC

  #+RESULTS: process
  [[file:pics/process.jpg]]

 Scripts in /docker.org/ 
 - build docker container /yolov3-tf2-training/ and push it docker
   repository with the name =marcus2002/yolov3-tf2-training:0=
 - download and convert original [[https://pjreddie.com/media/files/yolov3.weights][YLOV3 darnet weights]] to tensorflow
   format
 - download and convert original [[http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar][VOC2012 image set]]  to tensorflow format

 Scripts in /aws.org/ 
 - launch g4dn.xlarge EC2 instance 
 - run training on VOC2012 imageset
 - lauch tenorboard to monitor training using ssh tunnel from EC2
   instance to local machine
 - stop EC2 instance


** Training sessions

   First training session is launched with the command below. It
   applies [[https://github.com/zzh8829/yolov3-tf2/blob/master/docs/training_voc.md][instructions from yolov3-tf2]]. 

#+begin_example
       python train.py \
	--dataset ./voc.data/voc2012_train.tfrecord \
	--val_dataset ./voc.data/voc2012_val.tfrecord \
	--weights ./voc.data/yolov3-cnv.tf \
	--classes ./data/voc2012.names \
	--num_classes 20 \
	--mode fit \
        --transfer darknet \
	--batch_size 16 \
	--epochs 10 \
	--weights_num_classes 80 

#+end_example

First session was interrupted by /early stopping/ error on epoch 8.

Second training session was launched using the command below

#+begin_example
        python train.py \
	 --dataset ./voc.data/voc2012_train.tfrecord \
	 --val_dataset ./voc.data/voc2012_val.tfrecord \
	 --weights ./voc.data/cont_20.tf \
	 --classes ./data/voc2012.names \
	 --num_classes 20 \
	 --mode fit \
         --transfer fine_tune \
	 --batch_size 16 \
	 --epochs 10 \
	 --weights_num_classes 20 
#+end_example

It use weights =./voc.data/cont_20.tf=, which were copied from from
EPOC8 checkpoint data, and uses transfer paramater =fine_tune=. Also
this second session was interrupted by an /early stopping/ error on
epoch 4.

** Training session results

Results are summarized in the table below:

|              |                           Session 1 |                           Session 1 |                    Session 2 |                    Session 2 |                     Original |
|              |                             Epoch 7 |                             Epoch 8 |                    Epoch   3 |                      Epoch 4 |                      darknet |
|--------------+-------------------------------------+-------------------------------------+------------------------------+------------------------------+------------------------------|
| Image        | [[file:pics/early-stopping-epoch7.jpg]] | [[file:pics/early-stopping-epoch8.jpg]] | [[file:pics/cont_20_epoch3.jpg]] | [[file:pics/cont_20_epoch4.jpg]] | [[file:pics/darknet-street.jpg]] |
|--------------+-------------------------------------+-------------------------------------+------------------------------+------------------------------+------------------------------|
| # of busses  |                                   2 |                                   0 |                            2 |                            1 |                            2 |
| # of cars    |                                   0 |                                   1 |                            1 |                            0 |                            1 |
| # of persons |                                   0 |                                   2 |                            3 |                            2 |                            7 |
|--------------+-------------------------------------+-------------------------------------+------------------------------+------------------------------+------------------------------|

Session 2/Epoch 3 (=last fully exececuted epoch in session 2) gave
best detection result, but performed poorer that detection using
original darknet weights.


** Tools and versions

 Tools:
 - docker: build Docker container
 - jq: command line JSON processes
 - aws: Amazon Web Servicess Command Line Inteface
 - bash: scripts

 Tool versions:
 #+BEGIN_SRC sh :eval no-export :results output
 docker --version
 aws --version
 jq --version
 bash --version
 #+END_SRC

 #+RESULTS:
 : Docker version 19.03.8, build afacb8b7f0
 : aws-cli/2.0.7 Python/3.7.3 Linux/4.15.0-96-generic botocore/2.0.0dev11
 : jq-1.5
 : GNU bash, version 4.4.20(1)-release (x86_64-pc-linux-gnu)
 : Copyright (C) 2016 Free Software Foundation, Inc.
 : License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
 : 
 : This is free software; you are free to change and redistribute it.
 : There is NO WARRANTY, to the extent permitted by law.




